
#=========================================================================#
# Make file for Grub 0.97's Starup, 
#    -----------------------------------------
#    generated by Gandalf <ganstein@gmail.com>
#    2006-01-12
# 
# This is a part of AviatoR 
#=========================================================================#

Indigo: stage2 indigo


indigo: Indigo_ntldr_start Indigo_exec
	$(PREFIX)$(ECHO) building $@
	$(PREFIX)$(CAT) $^ >$@
	$(CP) $@ ../Avlgo.sys	

stage2: Indigo_start Indigo_exec 
	$(PREFIX)$(ECHO) building $@
	$(PREFIX)$(CAT) $^ >$@
	$(CP) $@ ../Avlgo.sys
	
# some optional settings
# FSYS_CFLAGS =  -DFSYS_EXT2FS=1 -DFSYS_FAT=1 -DFSYS_NTFS=1 -DFSYS_FFS=1 -DFSYS_UFS2=1 -DFSYS_MINIX=1 -DFSYS_REISERFS=1 -DFSYS_VSTAFS=1 -DFSYS_JFS=1 -DFSYS_XFS=1 -DFSYS_ISO9660=1 -DUSE_MD5_PASSWORDS=1
# no MD5 required.				 :	-DUSE_MD5_PASSWORDS=1
# no other than Graphics required:	-DSUPPORT_SERIAL=1 -DSUPPORT_HERCULES=1 

FSYS_CFLAGS   =  -DFSYS_EXT2FS=1 -DFSYS_FAT=1 -DFSYS_NTFS=1 -DFSYS_ISO9660=1 -DFSYS_ROMFS=1
TERM_CFLAGS   =  -DSUPPORT_GRAPHICS=1 

# Definations
PACKAGE = grub
PACKAGE_BUGREPORT = bug-grub@gnu.org
PACKAGE_NAME = GRUB
PACKAGE_STRING = GRUB 0.97
PACKAGE_TARNAME = grub
PACKAGE_VERSION = 0.97
PATH_SEPARATOR = :
PACKAGE_STR = -DPACKAGE=\"$(PACKAGE)\" -DVERSION=\"$(PACKAGE_VERSION)\"


# compile ruls  
%.so: %.c
	gcc $(INCLUDE) -c -o $@ $<

%.o: %.S
	$(CC) $(ASFLAGS) -DHAVE_ASM_USCORE=1 -c -o $@ $<

%.o: %.c
	$(CC) $(CFLAGS) $(FSYS_CFLAGS) -c -o $@ $<

%.bin: %.asm
	$(NS) -f bin -o $@ $<


START_OBJS = asm.o 
FS_OBJS    = disk_io.o fsys_ext2fs.o fsys_fat.o fsys_ffs.o fsys_iso9660.o \
             fsys_jfs.o fsys_minix.o fsys_reiserfs.o fsys_ufs2.o fsys_vstafs.o \
             fsys_xfs.o fsys_romfs.o fsys_ntfs.o
             
CLIB_OBJS  = builtins.o char_io.o cmdline.o common.o console.o gunzip.o \
                  
N_OBJS     = hercules.o bios.o boot.o md5.o serial.o smp-imps.o  \
             stage2.o terminfo.o tparm.o

BSTART_OBJ = start.o

#start_eltorito.o stage1_5.o 


# ======================================================== Indigo_start
#                                                 Indigo 的头部启动扇区
Indigo_ntldr_start  : avldr_ldr.bin
	$(PREFIX)mv avldr_ldr.bin Indigo_ntldr_start

Indigo_start : Indigo_size.h $(BSTART_OBJ)
	$(PREFIX)$(LD) -nostdlib -N -Ttext 7C00 $(BSTART_OBJ) -o $@	
	$(PREFIX)$(OBJCOPY) -R .note -R .comment -S -O binary $@ $@.ld
	$(PREFIX)dd if=$@.ld of=$@ bs=512 count=1

Indigo_size.h: Indigo_exec
	$(PREFIX) -rm -f $@
	$(PREFIX)get_fsize #define STAGE2_SIZE > $@	
	

# ======================================================== Indigo main
#                                                                 链接
# -N 消除符号
# -Ttext=0x20000 代码段从 0x2000:0x0000h 开始
Indigo.ld: $(START_OBJS) $(FS_OBJS) $(CLIB_OBJS) $(N_OBJS)
	$(PREFIX)$(LD) $(LDFLAGS) $(START_OBJS) $(FS_OBJS) $(CLIB_OBJS) $(N_OBJS) -o $@		


#                                                    输出二进制代码内核
# OBJDUMP -d -S 反汇编输出(使用重定向输出到文件)
# OBJCOPY -O binary 输出二进制代码(内核)
Indigo_exec: Indigo.ld
	$(PREFIX)$(ECHO) $(OBJDUMP): 反汇编 $< 到 $(basename $@).map
	$(PREFIX)$(OBJDUMP) -d -S $< > $(basename $@).map
	$(PREFIX)$(ECHO) $(OBJCOPY): 输出 $< 到二进制内核 $@
	$(PREFIX)$(OBJCOPY) -O binary $< $@



clean:
	$(PREFIX)$(ECHO) ____________________________________________________________________ [ clean Kernel ]
	$(RM) *.o
	$(RM) *.d
	$(RM) *.ld
	$(RM) *.map
	$(RM) Indigo_size.h
	$(RM) Indigo_exec
	$(RM) Indigo_start
	$(RM) stage2
	$(RM) *.asmo
	$(RM) indigo*
	


	
